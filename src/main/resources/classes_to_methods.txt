# TYPE:
# 1 = class that can execute/schedule a task/job/etc.
# 2 = class that is called/executed/scheduled/etc.
# 3 = class that is a helper/wrapper/etc.
# CLASS OR INTERFACE:
# 1 = class
# 2 = interface
#
# NEEDS CLASS CONSTANT PROPAGATION
# 1 = yes
# 0 = no
#
# CLASS: class_name|type|class_or_interface|METHODS
# METHODS:
# for TYPE = 1: method1@target&method2@target&etc.
# for TYPE = 2 and 3: method1&method2&etc.
#
# Timer
java.util.Timer|1|1|0|<java.util.Timer: void schedule(java.util.TimerTask,long)>%0%0@<java.util.TimerTask: void run()>&<java.util.Timer: void schedule(java.util.TimerTask,java.util.Date)>%0%0@<java.util.TimerTask: void run()>&<java.util.Timer: void schedule(java.util.TimerTask,long,long)>%0%0@<java.util.TimerTask: void run()>&<java.util.Timer: void schedule(java.util.TimerTask,java.util.Date,long)>%0%0@<java.util.TimerTask: void run()>%0%0&<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>%0%0@<java.util.TimerTask: void run()>&<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,java.util.Date,long)>%0%0@<java.util.TimerTask: void run()>
java.util.TimerTask|2|1|<java.util.TimerTask: void run()>
#
# Sound
#
android.media.soundtrigger.SoundTriggerDetector|1|1|0|<android.media.soundtrigger.SoundTriggerDetector: boolean startRecognition(int)>%0%0@<android.media.soundtrigger.SoundTriggerDetector$RecognitionCallback: void onDetected(android.hardware.soundtrigger.SoundTrigger$RecognitionEvent)>
android.media.soundtrigger.SoundTriggerDetector$RecognitionCallback|2|1|<android.media.soundtrigger.SoundTriggerDetector$RecognitionCallback: void onDetected(android.hardware.soundtrigger.SoundTrigger$RecognitionEvent)>
#
# BasicShellCommand
#
com.android.server.job.JobSchedulerShellCommand|1|1|0|<com.android.modules.utils.BasicShellCommandHandler: int onCommand(java.lang.String)>%0%0@<android.app.job.JobService: boolean onStartJob(android.app.job.JobParameters)>
android.app.job.JobService|2|1|<android.app.job.JobService: boolean onStartJob(android.app.job.JobParameters)>
#
# WorkManager
#
androidx.work.WorkManager|1|1|1|<androidx.work.WorkManager: androidx.work.Operation enqueue(androidx.work.WorkRequest)>%0%0@<androidx.work.Worker: androidx.work.ListenableWorker$Result doWork()>&<androidx.work.WorkManager: androidx.work.Operation enqueue(java.util.List)>%0%1@<androidx.work.Worker: androidx.work.ListenableWorker$Result doWork()>&<androidx.work.WorkManager: androidx.work.Operation enqueueUniquePeriodicWork(java.lang.String,androidx.work.ExistingPeriodicWorkPolicy,androidx.work.PeriodicWorkRequest)>%2%0@<androidx.work.Worker: androidx.work.ListenableWorker$Result doWork()>&<androidx.work.WorkManager: androidx.work.Operation enqueueUniqueWork(java.lang.String,androidx.work.ExistingWorkPolicy,java.util.List)>%2%1@<androidx.work.Worker: androidx.work.ListenableWorker$Result doWork()>&<androidx.work.WorkManager: androidx.work.Operation enqueueUniqueWork(java.lang.String,androidx.work.ExistingWorkPolicy,androidx.work.OneTimeWorkRequest)>%2%0@<androidx.work.Worker: androidx.work.ListenableWorker$Result doWork()>
androidx.work.Worker|2|1|<androidx.work.Worker: androidx.work.ListenableWorker$Result doWork()>
androidx.work.WorkRequest$Builder|3|1|<androidx.work.WorkRequest$Builder: androidx.work.WorkRequest$Builder setConstraints(androidx.work.Constraints)>&<androidx.work.WorkRequest$Builder: androidx.work.WorkRequest build()>
androidx.work.WorkRequest|3|1|
androidx.work.Constraints|3|1|
androidx.work.Constraints$Builder|3|1|<androidx.work.Constraints$Builder: androidx.work.Constraints$Builder setRequiresCharging(boolean)>&<androidx.work.Constraints$Builder: androidx.work.Constraints$Builder setRequiresDeviceIdle(boolean)>&<androidx.work.Constraints$Builder: androidx.work.Constraints$Builder setRequiredNetworkType(androidx.work.NetworkType)>&<androidx.work.Constraints$Builder:  androidx.work.Constraints$Builder setRequiresBatteryNotLow(boolean)>&<androidx.work.Constraints$Builder: androidx.work.Constraints$Builder setRequiresStorageNotLow(boolean)>
#
# Jobs
#
android.app.job.JobService|2|1|<android.app.job.JobService: boolean onStartJob(android.app.job.JobParameters)>
com.android.server.job.controllers.JobStatus|3|1|<com.android.server.job.controllers.JobStatus: void <init>(android.app.job.JobInfo,int,java.lang.String,int,java.lang.String,long,long)>&<com.android.server.job.controllers.JobStatus: void <init>(com.android.server.job.controllers.JobStatus)>&<com.android.server.job.controllers.JobStatus: void <init>(com.android.server.job.controllers.JobStatus,long,long,int)>
android.app.job.JobInfo|3|1|
android.app.job.JobInfo$Builder|3|1|<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiredNetworkType(int)>&<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiredNetwork(android.net.NetworkRequest)>&<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setEstimatedNetworkBytes(long,long)>&<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiresCharging(boolean)>&<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiresBatteryNotLow(boolean)>&<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiresDeviceIdle(boolean)>&<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiresStorageNotLow(boolean)>&<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setPeriodic(long)>&<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setPeriodic(long,long)>&<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setMinimumLatency(long)>&<android.app.job.JobInfo$Builder: android.app.job.JobInfo build()>&<android.app.job.JobInfo$Builder: void <init>(int, android.content.ComponentName)>
android.content.ComponentName|3|1|<android.content.ComponentName: void <init>(android.content.Context, java.lang.Class)>&<android.content.ComponentName: void <init>(android.content.Context, java.lang.String)>&<android.content.ComponentName: void <init>(java.lang.String, java.lang.String)>
android.app.job.JobScheduler|1|1|1|<android.app.job.JobScheduler: int schedule(android.app.job.JobInfo)>%0%0@<android.app.job.JobService: boolean onStartJob(android.app.job.JobParameters)>&<android.app.job.JobScheduler: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>%0%0@<android.app.job.JobService: boolean onStartJob(android.app.job.JobParameters)>
android.app.job.JobSchedulerImpl|1|1|1|<android.app.job.JobScheduler: int schedule(android.app.job.JobInfo)>%0%0@<android.app.job.JobService: boolean onStartJob(android.app.job.JobParameters)>&<android.app.job.JobScheduler: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>%0%0@<android.app.job.JobService: boolean onStartJob(android.app.job.JobParameters)>
com.android.server.job.JobSchedulerService|1|1|1|<com.android.server.job.JobSchedulerService: int schedule(android.app.job.JobInfo,int)>%0%0@<android.app.job.JobService: boolean onStartJob(android.app.job.JobParameters)>&<com.android.server.job.JobSchedulerService: int schedule(android.app.job.JobInfo)>%0%0@<android.app.job.JobService: boolean onStartJob(android.app.job.JobParameters)>
com.android.server.job.JobServiceContext|1|1|1|<com.android.server.job.JobSchedulerService: boolean executeRunnableJob(com.android.server.job.controllers.JobStatus)>%0%0@<android.app.job.JobService: boolean onStartJob(android.app.job.JobParameters)>
#
# Runnable, Callable
#
java.lang.Runnable|2|2|<java.lang.Runnable: void run()>
java.util.concurrent.Callable|2|2|<java.util.concurrent.Callable: java.lang.Object call()>
java.util.concurrent.RunnableScheduledFuture|2|2|<java.lang.Runnable: void run()>
java.util.concurrent.CompletableFuture|1|1|0|<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture runAsync(java.lang.Runnable)>%0%0@<java.lang.Runnable: void run()>&<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture runAsync(java.lang.Runnable,java.util.concurrent.Executor)>%0%0@<java.lang.Runnable: void run()>&<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture runAfterBoth(java.util.concurrent.CompletionStage,java.lang.Runnable)>%1%0@<java.lang.Runnable: void run()>&<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture runAfterBothAsync(java.util.concurrent.CompletionStage,java.lang.Runnable)>%1%0@<java.lang.Runnable: void run()>&<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture runAfterBothAsync(java.util.concurrent.CompletionStage,java.lang.Runnable,java.util.concurrent.Executor)>%1%0@<java.lang.Runnable: void run()>&<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture runAfterEither(java.util.concurrent.CompletionStage,java.lang.Runnable)>%1%0@<java.lang.Runnable: void run()>&<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture runAfterEitherAsync(java.util.concurrent.CompletionStage,java.lang.Runnable)>%1%0@<java.lang.Runnable: void run()>&<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture runAfterEitherAsync(java.util.concurrent.CompletionStage,java.lang.Runnable,java.util.concurrent.Executor)>%1%0@<java.lang.Runnable: void run()>&<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenRun(java.lang.Runnable)>%0%0@<java.lang.Runnable: void run()>
java.util.concurrent.ExecutorCompletionService|1|1|0|<java.util.concurrent.ExecutorCompletionService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>%0%0@<java.util.concurrent.Callable: java.lang.Object call()>&<java.util.concurrent.ExecutorCompletionService: java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object)>%0%0@<java.lang.Runnable: void run()>
java.util.concurrent.Executor|1|2|0|<java.util.concurrent.Executor: void execute(java.lang.Runnable)>%0%0@<java.lang.Runnable: void run()>
android.os.HandlerExecutor|1|1|0|<java.util.concurrent.Executor: void execute(java.lang.Runnable)>%0%0@<java.lang.Runnable: void run()>
android.net.wifi.SynchronousExecutor|1|1|0|<java.util.concurrent.Executor: void execute(java.lang.Runnable)>%0%0@<java.lang.Runnable: void run()>
com.android.systemui.util.concurrency.RepeatableExecutor|1|2|0|<com.android.systemui.util.concurrency.RepeatableExecutor: java.lang.Runnable executeRepeatedly(java.lang.Runnable,long,long)>%0%0@<java.lang.Runnable: void run()>&<com.android.systemui.util.concurrency.RepeatableExecutor: java.lang.Runnable executeRepeatedly(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>%0%0@<java.lang.Runnable: void run()>
com.android.systemui.util.concurrency.RepeatableExecutorImpl|1|1|0|<java.util.concurrent.Executor: void execute(java.lang.Runnable)>%0%0@<java.lang.Runnable: void run()>&<com.android.systemui.util.concurrency.RepeatableExecutor: java.lang.Runnable executeRepeatedly(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>%0%0@<java.lang.Runnable: void run()>
com.android.systemui.util.concurrency.DelayableExecutor|1|2|0|<com.android.systemui.util.concurrency.DelayableExecutor: java.lang.Runnable executeDelayed(java.lang.Runnable,long)>%0%0@<java.lang.Runnable: void run()>&<com.android.systemui.util.concurrency.DelayableExecutor: java.lang.Runnable executeDelayed(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>%0%0@<java.lang.Runnable: void run()>&<com.android.systemui.util.concurrency.DelayableExecutor: java.lang.Runnable executeAtTime(java.lang.Runnable,long)>%0%0@<java.lang.Runnable: void run()>&<com.android.systemui.util.concurrency.DelayableExecutor: java.lang.Runnable executeAtTime(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>%0%0@<java.lang.Runnable: void run()>
com.android.systemui.util.concurrency.ExecutorImpl|1|1|0|<java.util.concurrent.Executor: void execute(java.lang.Runnable)>%0%0@<java.lang.Runnable: void run()>&<com.android.systemui.util.concurrency.DelayableExecutor: java.lang.Runnable executeDelayed(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>%0%0@<java.lang.Runnable: void run()>&<com.android.systemui.util.concurrency.DelayableExecutor: java.lang.Runnable executeAtTime(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>%0%0@<java.lang.Runnable: void run()>
java.util.concurrent.ExecutorService|1|2|0|<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>%0%0@<java.util.concurrent.Callable: java.lang.Object call()>&<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object)>%0%0@<java.lang.Runnable: void run()>&<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>%0%0@<java.lang.Runnable: void run()>&<java.util.concurrent.ExecutorService: java.util.List invokeAll(java.util.Collection)>%0%1@<java.util.concurrent.Callable: java.lang.Object call()>&<java.util.concurrent.ExecutorService: java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)>%0%1@<java.util.concurrent.Callable: java.lang.Object call()>&<java.util.concurrent.ExecutorService: java.lang.Object invokeAny(java.util.Collection)>%0%1@<java.util.concurrent.Callable: java.lang.Object call()>&<java.util.concurrent.ExecutorService: java.lang.Object invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)>%0%1@<java.util.concurrent.Callable: java.lang.Object call()>
java.util.concurrent.ScheduledExecutorService|1|2|0|<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>%0%0@<java.lang.Runnable: void run()>&<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)>%0%0@<java.util.concurrent.Callable: java.lang.Object call()>&<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>%0%0@<java.lang.Runnable: void run()>&<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>%0%0@<java.lang.Runnable: void run()>
java.util.concurrent.ScheduledThreadPoolExecutor|1|1|0|<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>%0%0@<java.lang.Runnable: void run()>&<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)>%0%0@<java.util.concurrent.Callable: java.lang.Object call()>&<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>%0%0@<java.lang.Runnable: void run()>&<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>%0%0@<java.lang.Runnable: void run()>&<java.util.concurrent.ScheduledThreadPoolExecutor: void execute(java.lang.Runnable)>%0%0@<java.lang.Runnable: void run()>&<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.Future submit(java.lang.Runnable)>%0%0@<java.lang.Runnable: void run()>&<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object)>%0%0@<java.lang.Runnable: void run()>
java.util.concurrent.AbstractExecutorService|1|1|0|<java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>%0%0@<java.lang.Runnable: void run()>&<java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object)>%0%0@<java.lang.Runnable: void run()>&<java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>%0%0@<java.util.concurrent.Callable: java.lang.Object call()>&<java.util.concurrent.AbstractExecutorService: java.lang.Object invokeAny(java.util.Collection)>%0%1@<java.util.concurrent.Callable: java.lang.Object call()>&<java.util.concurrent.AbstractExecutorService: java.lang.Object invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)>%0%1@<java.util.concurrent.Callable: java.lang.Object call()>&<java.util.concurrent.AbstractExecutorService: java.util.List invokeAll(java.util.Collection)>%0%1@<java.util.concurrent.Callable: java.lang.Object call()>&<java.util.concurrent.AbstractExecutorService: java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)>%0%1@<java.util.concurrent.Callable: java.lang.Object call()>